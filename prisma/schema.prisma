generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String        @unique
  name          String?
  password      String
  role          Role          @default(EMPLOYEE)
  companyId     String
  company       Company       @relation(fields: [companyId], references: [id])
  notifications Notification[]
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  emailQueue    EmailQueue[]
  documents     Document[]

  Stoffkartotek Stoffkartotek[] @relation("StoffkartotekCreator")

  SJAKommentar SJAKommentar[]

  SJABilde SJABilde[]

  SJARevisjon SJARevisjon[]

  SJAGodkjenning SJAGodkjenning[]

  SJA SJA[] @relation("SJACreator")

  SJAMal SJAMal[]

  SJAVedlegg SJAVedlegg[]

  createdSafetyRounds SafetyRound[] @relation("CreatedSafetyRounds")
  assignedSafetyRounds SafetyRound[] @relation("AssignedSafetyRounds")
  trainings    Training[] @relation("TrainingParticipants")
  notificationSettings NotificationSettings?
  isActive    Boolean   @default(true)
  phone         String?
  avatar        String?
  settings UserSettings?
  image               String?
  address       Json?    // Lagrer adresse som JSON { street, postalCode, city }
  
}

model Company {
  id                   String           @id @default(cuid())
  orgNumber           String           @unique
  name                String
  organizationType     String          // organisasjonsform.beskrivelse
  organizationCode     String          // organisasjonsform.kode
  website             String?
  address             Address?
  users               User[]
  modules             Module[]
  hmsHandbook         HMSHandbook?
  riskAssessments     RiskAssessment[]
  deviations          Deviation[]
  isVerified          Boolean          @default(false)
  verificationDate    DateTime?
  lastBrregUpdate     DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  documents           Document[]

  Stoffkartotek Stoffkartotek[]

  SJA SJA[]

  SJAMal SJAMal[]

  HMSChange HMSChange[]

  isActive         Boolean  @default(true)
  paymentStatus    PaymentStatus @default(PENDING)
  lastPaymentDate  DateTime?
  trainings    Training[]
  goals       HMSGoal[]

  SafetyRound SafetyRound[]
}

model Address {
  id          String   @id @default(cuid())
  street      String?
  streetNo    String?
  postalCode  String
  city        String
  country     String   @default("Norge")
  companyId   String   @unique
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Module {
  id          String    @id @default(cuid())
  key         String    @unique
  label       String    
  description String?   
  isActive    Boolean   @default(true)
  isDefault   Boolean   @default(false)
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relasjoner til modul-spesifikke data
  safetyRounds     SafetyRound[]
  hmsConsultations HMSConsultation[]
  
  @@index([companyId])
}

model HMSHandbook {
  id        String      @id @default(cuid())
  version   Int         @default(1)
  title     String
  description String?
  published Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  companyId String @unique
  company   Company     @relation(fields: [companyId], references: [id])
  sections  HMSSection[]
  releases  HMSRelease[]

  @@index([companyId])
}

model HMSRelease {
  id          String       @id @default(cuid())
  version     Int
  handbookId  String
  handbook    HMSHandbook  @relation(fields: [handbookId], references: [id])
  changes     String       // Beskrivelse av endringer
  reason      String       // Årsak til endringen
  approvedBy  String       // Bruker-ID som godkjente endringen
  approvedAt  DateTime     @default(now())
  content     Json         // Snapshot av hele håndboken ved release
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([handbookId, version])
}

model HMSSection {
  id          String   @id @default(cuid())
  title       String
  content     Json
  order       Int
  parentId    String?  // For underseksjoner
  parent      HMSSection? @relation("SectionToSection", fields: [parentId], references: [id])
  subsections HMSSection[] @relation("SectionToSection")
  handbookId  String
  handbook    HMSHandbook @relation(fields: [handbookId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  changes     HMSChange[]

  // Kobling til risikovurderinger
  relatedRiskAssessments RiskAssessment[]

  @@index([handbookId])
  @@index([parentId])
}


model RiskAssessment {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  department  String?       // Avdeling/område
  activity    String        // Aktivitet som vurderes
  status      Status        @default(DRAFT)
  dueDate     DateTime?     // Frist for gjennomføring
  companyId   String
  company     Company       @relation(fields: [companyId], references: [id])
  createdBy   String       // Bruker-ID som opprettet
  updatedBy   String?      // Bruker-ID som sist oppdaterte
  hazards     Hazard[]     // Risikofaktorer
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  hmsChanges    RiskAssessmentHMSChange[]
  measures      RiskAssessmentMeasure[]

  // Kobling til HMS-seksjoner
  relatedHMSSections HMSSection[]

  @@index([companyId])
}

model Hazard {
  id                String          @id @default(cuid())
  description       String          @db.Text
  consequence       String          @db.Text
  probability       Int             // 1-5
  severity         Int             // 1-5
  riskLevel        Int             // Beregnet: probability * severity
  existingMeasures String?         @db.Text  // Eksisterende tiltak
  riskAssessmentId String
  riskAssessment   RiskAssessment  @relation(fields: [riskAssessmentId], references: [id], onDelete: Cascade)
  measures         Measure[]       // Beholder eksisterende tiltak-relasjon
  hmsChanges       HazardHMSChange[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  riskMeasures     RiskAssessmentMeasure[]  // Ny relasjon for risikovurderingstiltak

  @@index([riskAssessmentId])
}

model Measure {
  id          String    @id @default(cuid())
  description String    @db.Text
  type        MeasureType
  status      Status    @default(OPEN)
  priority    Priority
  dueDate     DateTime?
  completedAt DateTime?
  hazardId    String
  hazard      Hazard    @relation(fields: [hazardId], references: [id], onDelete: Cascade)
  assignedTo  String?   // Bruker-ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hmsChangeId String?
  hmsChange   HMSChange? @relation(fields: [hmsChangeId], references: [id])

  @@index([hazardId])
  @@index([hmsChangeId])
  SafetyRoundFinding SafetyRoundFinding[]
}

model Deviation {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  type        DeviationType
  category    String    // F.eks. HMS, Kvalitet, Miljø
  severity    Severity
  status      Status    @default(OPEN)
  dueDate     DateTime?
  location    String?   // Hvor skjedde avviket
  reportedBy  String    // Bruker-ID som rapporterte
  assignedTo  String?   // Bruker-ID som er ansvarlig
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  measures    DeviationMeasure[]
  images      DeviationImage[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  closedAt    DateTime?
  closedBy    String?   // Bruker-ID som lukket avviket
  hmsChanges    DeviationHMSChange[]

  @@index([companyId])
  @@index([status])
}

model DeviationMeasure {
  id          String    @id @default(cuid())
  description String
  type        String    // ELIMINATION, SUBSTITUTION, ENGINEERING, ADMINISTRATIVE, PPE
  status      String    @default("OPEN")  // OPEN, CLOSED
  priority    String    // LOW, MEDIUM, HIGH, CRITICAL
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  assignedTo  String?
  createdBy   String
  deviationId String
  deviation   Deviation @relation(fields: [deviationId], references: [id])
  closedAt    DateTime?
  closedBy    String?
  closeComment String?   // Begrunnelse for lukking av tiltaket
  closureVerifiedBy String? // Person som har verifisert at tiltaket er gjennomført
  closureVerifiedAt DateTime?

  @@index([deviationId])
}

model DeviationImage {
  id          String    @id @default(cuid())
  url         String
  caption     String?
  deviationId String
  deviation   Deviation @relation(fields: [deviationId], references: [id], onDelete: Cascade)
  uploadedBy  String    // Bruker-ID
  createdAt   DateTime  @default(now())

  @@index([deviationId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("notifications")
}

enum NotificationType {
  DEVIATION_CREATED
  DEVIATION_ASSIGNED
  DEVIATION_UPDATED
  DEVIATION_CLOSED
  SJA_CREATED
  SJA_ASSIGNED
  SJA_UPDATED
  SJA_APPROVED
}

model EmailQueue {
  id        String   @id @default(cuid())
  userId    String
  type      String
  payload   Json
  attempts  Int      @default(0)
  status    String   @default("PENDING") // PENDING, SENT, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([userId])
}

model Document {
  id        String   @id @default(cuid())
  name      String
  type      String
  url       String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasjoner
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String

  @@index([userId])
  @@index([companyId])
}

enum Role {
  ADMIN
  SUPPORT
  COMPANY_ADMIN
  EMPLOYEE
}

enum Status {
  DRAFT
  OPEN
  IN_PROGRESS
  SCHEDULED
  COMPLETED
  CLOSED
  CANCELLED
  AAPEN
  PAAGAAR
  FULLFOERT
  LUKKET
}

enum MeasureType {
  ELIMINATION      // Eliminering
  SUBSTITUTION     // Substitusjon
  ENGINEERING      // Tekniske tiltak
  ADMINISTRATIVE   // Administrative tiltak
  PPE             // Personlig verneutstyr
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DeviationType {
  NEAR_MISS     // Nestenulykke
  INCIDENT      // Hendelse
  ACCIDENT      // Ulykke
  IMPROVEMENT   // Forbedringsforslag
  OBSERVATION   // Observasjon
}

enum Severity {
  LOW      // Lav alvorlighetsgrad
  MEDIUM   // Middels alvorlighetsgrad
  HIGH     // Høy alvorlighetsgrad
  CRITICAL // Kritisk alvorlighetsgrad
}

enum FareSymbol {
  BRANNFARLIG
  ETSENDE
  GIFTIG
  HELSEFARE
  MILJØFARE
  EKSPLOSJONSFARLIG
  OKSIDERENDE
  GASS_UNDER_TRYKK
  AKUTT_GIFTIG
}

model Stoffkartotek {
  id            String      @id @default(cuid())
  produktnavn   String
  produsent     String?
  databladUrl   String?     @db.Text
  beskrivelse   String?     @db.Text
  bruksomrade   String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  companyId     String      
  company       Company     @relation(fields: [companyId], references: [id])
  opprettetAv   User?       @relation("StoffkartotekCreator", fields: [opprettetAvId], references: [id])
  opprettetAvId String?
  fareSymboler  FareSymbolMapping[]

  @@index([companyId])
  SJAProdukt SJAProdukt[]
}

model FareSymbolMapping {
  id               String        @id @default(cuid())
  symbol           FareSymbol
  stoffkartotek    Stoffkartotek @relation(fields: [stoffkartotekId], references: [id], onDelete: Cascade)
  stoffkartotekId  String

  @@index([stoffkartotekId])
}

// SJA modeller
enum SJAStatus {
  UTKAST
  SENDT_TIL_GODKJENNING
  GODKJENT
  AVVIST
  UTGATT
}

model SJA {
  id            String      @id @default(cuid())
  tittel        String
  arbeidssted   String
  beskrivelse   String      @db.Text
  startDato     DateTime
  sluttDato     DateTime?
  status        SJAStatus  @default(UTKAST)
  
  // ISO 45001: Risikovurdering og tiltak
  risikoer      Risiko[]
  tiltak        Tiltak[]
  
  // Stoffkartotek-produkter
  produkter     SJAProdukt[]
  
  // ISO 9001: Sporbarhet
  opprettetAv   User       @relation("SJACreator", fields: [opprettetAvId], references: [id])
  opprettetAvId String
  opprettetDato DateTime   @default(now())
  oppdatertDato DateTime   @updatedAt
  
  // ISO 27001: Tilgangskontroll
  company       Company    @relation(fields: [companyId], references: [id])
  companyId     String
  
  // Godkjenning og historikk
  godkjenninger SJAGodkjenning[]
  revisjoner    SJARevisjon[]
  bilder        SJABilde[]
  kommentarer   SJAKommentar[]
  vedlegg       SJAVedlegg[]
  kundeGodkjenning SJAKundeGodkjenning[]

  @@index([companyId])
  @@index([opprettetAvId])
}

// Ny modell for å koble SJA med stoffkartotek-produkter
model SJAProdukt {
  id          String      @id @default(cuid())
  mengde      String?
  
  // Relasjoner
  sja         SJA        @relation(fields: [sjaId], references: [id], onDelete: Cascade)
  sjaId       String
  produkt     Stoffkartotek @relation(fields: [produktId], references: [id])
  produktId   String

  @@index([sjaId])
  @@index([produktId])
}

model Risiko {
  id          String    @id @default(cuid())
  aktivitet   String
  fare        String
  konsekvens  String
  sannsynlighet Int
  alvorlighet Int
  risikoVerdi Int
  sjaId       String
  sja         SJA       @relation(fields: [sjaId], references: [id], onDelete: Cascade)

  @@index([sjaId])
}

model Tiltak {
  id          String    @id @default(cuid())
  beskrivelse String
  ansvarlig   String
  frist       DateTime?
  status      String
  sjaId       String
  sja         SJA       @relation(fields: [sjaId], references: [id], onDelete: Cascade)

  @@index([sjaId])
}

model SJAGodkjenning {
  id            String    @id @default(cuid())
  sjaId         String
  sja           SJA       @relation(fields: [sjaId], references: [id], onDelete: Cascade)
  godkjentAv    User      @relation(fields: [godkjentAvId], references: [id])
  godkjentAvId  String
  godkjentDato  DateTime  @default(now())
  rolle         String    // f.eks. "HMS-ansvarlig", "Prosjektleder", "Kunde"
  status        SJAStatus // Nytt felt
  kommentar     String?   @db.Text
  
  @@index([sjaId])
  @@index([godkjentAvId])
}

model SJARevisjon {
  id          String    @id @default(cuid())
  sjaId       String
  sja         SJA       @relation(fields: [sjaId], references: [id], onDelete: Cascade)
  endretAv    User      @relation(fields: [endretAvId], references: [id])
  endretAvId  String
  endretDato  DateTime  @default(now())
  endringer   String    @db.Text // JSON-struktur med endringer
  
  @@index([sjaId])
  @@index([endretAvId])
}

model SJABilde {
  id          String    @id @default(cuid())
  sjaId       String
  sja         SJA       @relation(fields: [sjaId], references: [id], onDelete: Cascade)
  url         String    @db.Text
  beskrivelse String?
  lastetOppAv User      @relation(fields: [lastetOppAvId], references: [id])
  lastetOppAvId String
  lastetOppDato DateTime @default(now())
  
  @@index([sjaId])
  @@index([lastetOppAvId])
}

model SJAKommentar {
  id          String    @id @default(cuid())
  sjaId       String
  sja         SJA       @relation(fields: [sjaId], references: [id], onDelete: Cascade)
  forfatter   User      @relation(fields: [forfatterId], references: [id])
  forfatterId String
  innhold     String    @db.Text
  opprettetDato DateTime @default(now())
  
  @@index([sjaId])
  @@index([forfatterId])
}

model SJAMal {
  id            String    @id @default(cuid())
  navn          String
  beskrivelse   String?   @db.Text
  
  // Grunnleggende informasjon
  tittel        String
  prosjektNavn  String
  arbeidssted   String
  
  // Deltakere og ansvarlige
  deltakere     String    @db.Text
  ansvarlig     String
  
  // Risikovurdering
  arbeidsoppgaver String  @db.Text
  risikoer      SJAMalRisiko[]
  tiltak        SJAMalTiltak[]
  
  // ISO 9001: Sporbarhet
  opprettetAv   User     @relation(fields: [opprettetAvId], references: [id])
  opprettetAvId String
  opprettetDato DateTime @default(now())
  
  // ISO 27001: Tilgangskontroll
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String

  @@index([companyId])
  @@index([opprettetAvId])
}

model SJAMalRisiko {
  id            String    @id @default(cuid())
  aktivitet     String
  fare          String
  konsekvens    String
  sannsynlighet Int
  alvorlighet   Int
  risikoVerdi   Int
  tiltak        String    @db.Text
  
  mal           SJAMal    @relation(fields: [malId], references: [id], onDelete: Cascade)
  malId         String

  @@index([malId])
}

model SJAMalTiltak {
  id            String    @id @default(cuid())
  beskrivelse   String    @db.Text
  ansvarlig     String
  frist         DateTime?
  
  mal           SJAMal    @relation(fields: [malId], references: [id], onDelete: Cascade)
  malId         String

  @@index([malId])
}


model SJAVedlegg {
  id            String    @id @default(cuid())
  navn          String
  url           String    @db.Text
  type          String    // f.eks. "sikkerhetsdatablad", "prosedyre", etc.
  
  sja           SJA       @relation(fields: [sjaId], references: [id], onDelete: Cascade)
  sjaId         String
  
  lastetOppAv   User      @relation(fields: [lastetOppAvId], references: [id])
  lastetOppAvId String
  lastetOppDato DateTime  @default(now())

  @@index([sjaId])
  @@index([lastetOppAvId])
}

model SJAKundeGodkjenning {
  id            String    @id @default(cuid())
  sja           SJA       @relation(fields: [sjaId], references: [id])
  sjaId         String    @unique
  
  kundeNavn     String
  kundeEpost    String
  godkjentDato  DateTime?
  avvistDato    DateTime?
  kommentar     String?   @db.Text
  
  // For sporbarhet
  opprettetDato DateTime  @default(now())
  oppdatertDato DateTime  @updatedAt

  @@index([sjaId])
}

// Ny modell for HMS-endringer
model HMSChange {
  id            String    @id @default(cuid())
  title         String
  description   String    @db.Text
  changeType    String    // f.eks. "POLICY", "PROCEDURE", "TRAINING"
  status        String    // f.eks. "PLANNED", "IN_PROGRESS", "COMPLETED"
  priority      Priority  // Legger til prioritet
  dueDate       DateTime? // Legger til frist
  implementedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Eksisterende relasjoner beholdes
  section       HMSSection? @relation(fields: [sectionId], references: [id])
  sectionId     String?
  
  // Beholder eksisterende koblinger
  deviations    DeviationHMSChange[]
  riskAssessments RiskAssessmentHMSChange[]
  measures     Measure[]
  
  // Metadata beholdes
  createdBy     String
  assignedTo    String?    // Legger til ansvarlig person
  companyId     String
  company       Company    @relation(fields: [companyId], references: [id])
  hazards       HazardHMSChange[]

  // Legger til godkjenning
  approvedBy    String?
  approvedAt    DateTime?

  @@index([companyId])
  @@index([sectionId])
  @@index([status])
}

// Koblingstabeller
model DeviationHMSChange {
  id          String     @id @default(cuid())
  deviation   Deviation  @relation(fields: [deviationId], references: [id])
  deviationId String
  hmsChange   HMSChange  @relation(fields: [hmsChangeId], references: [id])
  hmsChangeId String
  createdAt   DateTime   @default(now())

  @@unique([deviationId, hmsChangeId])
  @@index([deviationId])
  @@index([hmsChangeId])
}

model RiskAssessmentHMSChange {
  id               String         @id @default(cuid())
  riskAssessment   RiskAssessment @relation(fields: [riskAssessmentId], references: [id])
  riskAssessmentId String
  hmsChange        HMSChange      @relation(fields: [hmsChangeId], references: [id])
  hmsChangeId      String
  createdAt        DateTime       @default(now())

  @@unique([riskAssessmentId, hmsChangeId])
  @@index([riskAssessmentId])
  @@index([hmsChangeId])
}

// Ny koblingstabell mellom Hazard og HMSChange
model HazardHMSChange {
  id          String    @id @default(cuid())
  hazard      Hazard    @relation(fields: [hazardId], references: [id])
  hazardId    String
  hmsChange   HMSChange @relation(fields: [hmsChangeId], references: [id])
  hmsChangeId String
  createdAt   DateTime  @default(now())

  @@unique([hazardId, hmsChangeId])
  @@index([hazardId])
  @@index([hmsChangeId])
}

enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
  CANCELLED
}

// Vernerunde-modeller
model SafetyRound {
  id            String      @id @default(cuid())
  title         String
  description   String?
  status        String      // DRAFT, SCHEDULED, IN_PROGRESS, COMPLETED
  scheduledDate DateTime?
  dueDate       DateTime?
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  moduleId      String
  createdBy     String
  assignedTo    String?
  approvedAt    DateTime?
  approvedBy    String?
  companyId     String
  company       Company     @relation(fields: [companyId], references: [id])
  module        Module      @relation(fields: [moduleId], references: [id])
  creator       User        @relation("CreatedSafetyRounds", fields: [createdBy], references: [id])
  assignedUser  User?       @relation("AssignedSafetyRounds", fields: [assignedTo], references: [id])
  findings      SafetyRoundFinding[]
  checklistItems SafetyRoundChecklistItem[]
  approvals     SafetyRoundApproval[]
  report        SafetyRoundReport?

  @@index([companyId])
  @@index([moduleId])
  @@index([createdBy])
  @@index([assignedTo])
}

model SafetyRoundFinding {
  id             String      @id @default(cuid())
  description    String
  severity       String      // "LOW", "MEDIUM", "HIGH", "CRITICAL"
  status         String      // "OPEN", "IN_PROGRESS", "RESOLVED"
  location       String?
  imageUrl       String?
  dueDate        DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  safetyRound    SafetyRound @relation(fields: [safetyRoundId], references: [id], onDelete: Cascade)
  safetyRoundId  String

  checklistItem  SafetyRoundChecklistItem @relation(fields: [checklistItemId], references: [id], onDelete: Cascade)
  checklistItemId String

  createdBy      String
  assignedTo     String?
  
  measures       SafetyRoundMeasure[]
  Measure        Measure[]

  @@index([safetyRoundId])
  @@index([checklistItemId])
}

model SafetyRoundMeasure {
  id          String      @id @default(cuid())
  description String
  status      String      // PLANNED, IN_PROGRESS, COMPLETED
  priority    String      // HIGH, MEDIUM, LOW
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  findingId   String
  finding     SafetyRoundFinding @relation(fields: [findingId], references: [id])
  createdBy   String
  completedBy String?
  assignedTo  String?
  estimatedCost Float?

  @@index([findingId])
}

// Ny modell for sjekkliste-elementer
model SafetyRoundChecklistItem {
  id            String      @id @default(cuid())
  category      String      // f.eks. "Arbeidsmiljø", "Brannsikkerhet", etc.
  question      String      
  description   String?     // Veiledning/hjelpetekst
  response      String?     // "YES", "NO", "NA"
  comment       String?     // Kommentar til svaret
  imageUrl      String?     // Bilde knyttet til elementet
  order         Int         // Rekkefølge i listen
  isRequired    Boolean     @default(true)
  completedAt   DateTime?   
  completedBy   String?     // Bruker-ID som fylte ut
  safetyRoundId String
  safetyRound   SafetyRound @relation(fields: [safetyRoundId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  findings      SafetyRoundFinding[]

  @@index([safetyRoundId])
}

// HMS Rådgivning-modeller
model HMSConsultation {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  type        String    // MEETING, PHONE, EMAIL, etc.
  status      Status    @default(SCHEDULED)
  scheduledAt DateTime
  completedAt DateTime?
  summary     String?   @db.Text
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    // Bruker-ID
  consultantId String   // Bruker-ID for HMS-rådgiver
  
  // Relasjoner
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    String
  actions     HMSConsultationAction[]
  
  @@index([moduleId])
}

model HMSConsultationAction {
  id          String    @id @default(cuid())
  description String    @db.Text
  status      Status    @default(OPEN)
  dueDate     DateTime?
  completedAt DateTime?
  
  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relasjoner
  consultation HMSConsultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  consultationId String
  
  @@index([consultationId])
}

model SafetyRoundApproval {
  id            String      @id @default(cuid())
  token         String      @unique
  status        String      @default("PENDING") // PENDING, APPROVED, REJECTED
  safetyRound   SafetyRound @relation(fields: [safetyRoundId], references: [id])
  safetyRoundId String
  expiresAt     DateTime
  approvedAt    DateTime?
  approvedBy    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([safetyRoundId])
}

model HMSTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String?  // For bransjespesifikke maler
  isDefault   Boolean  @default(false)
  sections    HMSTemplateSection[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HMSTemplateSection {
  id            String   @id @default(cuid())
  title         String
  content       String   @db.Text
  order         Int
  version       Int      @default(1)
  lastEditedBy  String
  lastEditedAt  DateTime @default(now())
  templateId    String
  template      HMSTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  parentId      String?
  parent        HMSTemplateSection? @relation("SubSections", fields: [parentId], references: [id])
  subsections   HMSTemplateSection[] @relation("SubSections")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([templateId])
  @@index([parentId])
  @@index([lastEditedAt])
}

model Training {
  id           String    @id @default(cuid())
  name         String
  description  String?
  date         DateTime
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id])
  participants User[]    @relation("TrainingParticipants")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([companyId])
}

model HMSGoal {
  id          String    @id @default(cuid())
  description String
  year        Int
  status      GoalStatus @default(IN_PROGRESS)
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([companyId])
  @@index([year])
}

enum GoalStatus {
  IN_PROGRESS
  ACHIEVED
  CANCELLED
}

model AuditLog {
  id          String    @id @default(cuid())
  action      String    // f.eks. "CLOSE_MEASURE"
  entityType  String    // f.eks. "DEVIATION_MEASURE"
  entityId    String
  userId      String
  companyId   String
  details     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([entityType, entityId])
  @@index([userId])
  @@index([companyId])
}

model RiskAssessmentMeasure {
  id                String         @id @default(cuid())
  description       String
  type             String         // f.eks. "ELIMINATION", "SUBSTITUTION", etc.
  status           String         @default("OPEN")
  priority         String
  dueDate          DateTime?
  completedAt      DateTime?
  assignedTo       String?
  createdBy        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relasjoner
  riskAssessment   RiskAssessment @relation(fields: [riskAssessmentId], references: [id])
  riskAssessmentId String
  hazard          Hazard?        @relation(fields: [hazardId], references: [id])
  hazardId        String?

  @@index([riskAssessmentId])
  @@index([hazardId])
}

model SafetyRoundReport {
  id            String      @id @default(cuid())
  safetyRoundId String      @unique
  safetyRound   SafetyRound @relation(fields: [safetyRoundId], references: [id])
  reportNumber  String      @unique // Unikt rapportnummer for ISO-sporing
  generatedAt   DateTime    @default(now())
  generatedBy   String      // User ID som genererte rapporten
  signedAt      DateTime?
  signedBy      String?     // User ID som signerte rapporten
  status        String      @default("PENDING") // PENDING, SIGNED, REJECTED
  pdfUrl        String?     // URL til den genererte PDF-en
  metadata      Json?       // Ekstra metadata for rapporten

  @@index([safetyRoundId])
  @@index([reportNumber])
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id])
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  emailDigestFrequency  String   @default("INSTANT") // INSTANT, DAILY, WEEKLY, NONE
  
  // Spesifikke innstillinger for ulike varslingstyper
  deviationCreated     Boolean  @default(true)
  deviationAssigned    Boolean  @default(true)
  sjaCreated           Boolean  @default(true)
  sjaAssigned          Boolean  @default(true)
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  dailyDigest        Boolean  @default(false)
  weeklyDigest       Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  theme              String    @default("system") // "light", "dark", "system"

  @@map("user_settings")
} 